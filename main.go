package main

import (
	"log"
	"os"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botToken := os.Getenv("TELEGRAM_TOKEN")
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil && update.Message.Video != nil {
			log.Printf("Video FileID: %s", update.Message.Video.FileID)
		}

		if update.Message != nil && update.Message.IsCommand() {
			switch update.Message.Command() {
			case "start":
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –ù–∞—á–Ω–µ–º?")
				msg.ReplyMarkup = firstInlineKeyboard()
				bot.Send(msg)
			}
		}

		if update.CallbackQuery != nil {
			data := update.CallbackQuery.Data
			chatID := update.CallbackQuery.Message.Chat.ID

			switch data {
			case "free_lesson":
				video := tgbotapi.NewVideo(chatID, tgbotapi.FileID("–í–°–¢–ê–í–¨_–°–Æ–î–ê_file_id"))
				video.Caption = "–í–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫!\n\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —è –∏—Å–ø–æ–ª—å–∑—É—é –≤ Reels?"
				video.ReplyMarkup = secondInlineKeyboard()
				bot.Send(video)

			case "ai_tools":
				msg := tgbotapi.NewMessage(chatID, "–í–æ—Ç —á–µ–∫-–ª–∏—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è –∏—Å–ø–æ–ª—å–∑—É—é.")
				msg.ReplyMarkup = thirdInlineKeyboard()
				bot.Send(msg)

			case "watch_reels":
				msg := tgbotapi.NewMessage(chatID, "–ü–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫–∏–µ Reels —è —Å–æ–∑–¥–∞—é —Å —ç—Ç–∏–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏.")
				msg.ReplyMarkup = finalInlineKeyboard()
				bot.Send(msg)

			case "course_offer":
				msg := tgbotapi.NewMessage(chatID, "–¢—ã —Å–º–æ–∂–µ—à—å –Ω–∞—É—á–∏—Ç—å—Å—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–∞–∫–∏–µ –≤–∏–¥–µ–æ –∑–∞ –ø–∞—Ä—É –Ω–µ–¥–µ–ª—å –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –Ω–∞ —ç—Ç–æ–º. –ö—É—Ä—Å –≤–∫–ª—é—á–∞–µ—Ç:\n\n‚Ä¢ –í–∏–¥–µ–æ –∏–∑ —Ç–µ–∫—Å—Ç–∞\n‚Ä¢ 3D-–æ–±—ä–µ–∫—Ç—ã\n‚Ä¢ DeepFake\n‚Ä¢ –í–∏–¥–µ–æ –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤\n‚Ä¢ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–º–µ—Ç–æ–≤\n\n–£—Ä–æ–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã 24/7 –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤.")
				bot.Send(msg)
			}
		}
	}
}

func firstInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üé• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫", "free_lesson")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func secondInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "ai_tools")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func thirdInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üì± –°–º–æ—Ç—Ä–µ—Ç—å Reels", "watch_reels")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func finalInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üöÄ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–±—É—á–µ–Ω–∏—é", "course_offer")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}
