package main

import (
	"log"
	"os"
	"strings"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Fatal("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env —Ñ–∞–π–ª–∞")
	}

	botToken := os.Getenv("TELEGRAM_TOKEN")
	bot, err := tgbotapi.NewBotAPI(botToken)
	if err != nil {
		log.Panic(err)
	}

	bot.Debug = true
	log.Printf("–ë–æ—Ç %s –∑–∞–ø—É—â–µ–Ω", bot.Self.UserName)

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60
	updates := bot.GetUpdatesChan(u)

	for update := range updates {
		if update.Message != nil {
			text := strings.ToLower(update.Message.Text)

			if strings.Contains(text, "—Ö–æ—á—É —É—Ä–æ–∫") {
				msg := tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç! –í–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫ üëá")
				msg.ReplyMarkup = firstInlineKeyboard()
				if _, err := bot.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É:", err)
				}
			}

			if update.Message.Video != nil {
				log.Printf("Video FileID: %s", update.Message.Video.FileID)
			}
		}

		if update.CallbackQuery != nil {
			callback := tgbotapi.NewCallback(update.CallbackQuery.ID, "")
			if _, err := bot.Request(callback); err != nil {
				log.Println("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è callback:", err)
			}

			data := update.CallbackQuery.Data
			chatID := update.CallbackQuery.Message.Chat.ID

			switch data {
			case "free_lesson":
				video := tgbotapi.NewVideo(chatID, tgbotapi.FileID("BAACAgIAAxkBAAMPaDQXibPXuGm8U9wG_KjFDwrJ8JkAAlVqAAJOBKFJ0BS7KrQcUS82BA"))
				video.Caption = "–í–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫!\n\n–•–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å, –∫–∞–∫–∏–µ –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —è –∏—Å–ø–æ–ª—å–∑—É—é –≤ Reels?"
				video.ReplyMarkup = secondInlineKeyboard()
				if _, err := bot.Send(video); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ:", err)
				}

			case "ai_tools":
				doc := tgbotapi.NewDocument(chatID, tgbotapi.FileID("BQACAgIAAxkBAAMUaDQYsojlC47_ygUxnhYkdZGrCEwAAoBqAAJOBKFJGvpBU-vHqYo2BA"))
				doc.Caption = "–í–æ—Ç —á–µ–∫-–ª–∏—Å—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —è –∏—Å–ø–æ–ª—å–∑—É—é üí°"
				doc.ReplyMarkup = thirdInlineKeyboard()
				if _, err := bot.Send(doc); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF: %v", err)
				}

			case "watch_reels":
				video := tgbotapi.NewVideo(chatID, tgbotapi.FileID("BAACAgIAAxkBAAMWaDVurVxdzzx3_2JS8c0DTXLsrWMAAhxvAAIYyaFJaxtuxnFLdGE2BA"))
				video.Caption = "–í–æ—Ç –ø—Ä–∏–º–µ—Ä—ã Reels, –∫–æ—Ç–æ—Ä—ã–µ —è —Å–æ–∑–¥–∞—é —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π üî•"
				video.ReplyMarkup = finalInlineKeyboard()
				if _, err := bot.Send(video); err != nil {
					log.Printf("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Reels-–≤–∏–¥–µ–æ: %v", err)
				}

			case "course_learn":
				msg := tgbotapi.NewMessage(chatID, `üö® –ó–∞–∫—Ä—ã–≤–∞–µ–º –Ω–∞–±–æ—Ä —á–µ—Ä–µ–∑ 2 –¥–Ω—è ‚Äî –ø–æ—Ç–æ–º –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â–∏–π –ø–æ—Ç–æ–∫.
üí∞ –°–µ–π—á–∞—Å —Ü–µ–Ω–∞ ‚Äî 50 000 —Ç–≥. –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø–æ–¥–Ω–∏–º–∞–µ–º –¥–æ 75 000 —Ç–≥.

üí∞ –°–µ–π—á–∞—Å –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ 2 —Ç–∞—Ä–∏—Ñ–æ–≤:
‚úÖ *–° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∞–≤—Ç–æ—Ä–∞* ‚Äî –æ–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å, –ø–æ–º–æ—â—å, –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
üíº *–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π* ‚Äî –ø—Ä–æ—Å—Ç–æ —É—Ä–æ–∫–∏, –±–µ–∑ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è

–í—ã–±–µ—Ä–∏ —Å–≤–æ–π —Ç–∞—Ä–∏—Ñ:`)
				msg.ParseMode = "Markdown"
				msg.ReplyMarkup = tariffKeyboard()
				if _, err := bot.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–∞—Ä–∏—Ñ–æ–≤:", err)
				}

			case "tariff_support":
				msg := tgbotapi.NewMessage(chatID, "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–∞—Ä–∏—Ñ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π: https://your-link.com/support")
				if _, err := bot.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:", err)
				}

			case "tariff_classic":
				msg := tgbotapi.NewMessage(chatID, "üîó –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∞—Ä–∏—Ñ: https://your-link.com/classic")
				if _, err := bot.Send(msg); err != nil {
					log.Println("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π —Ç–∞—Ä–∏—Ñ:", err)
				}
			}
		}
	}
}

func firstInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üé• –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫", "free_lesson")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func secondInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("ü§ñ –ù–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞", "ai_tools")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func thirdInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üì± –°–º–æ—Ç—Ä–µ—Ç—å Reels", "watch_reels")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func finalInlineKeyboard() tgbotapi.InlineKeyboardMarkup {
	button := tgbotapi.NewInlineKeyboardButtonData("üìö –•–æ—á—É –æ–±—É—á–µ–Ω–∏–µ", "course_learn")
	return tgbotapi.NewInlineKeyboardMarkup(tgbotapi.NewInlineKeyboardRow(button))
}

func tariffKeyboard() tgbotapi.InlineKeyboardMarkup {
	btn1 := tgbotapi.NewInlineKeyboardButtonData("‚úÖ –° –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", "tariff_support")
	btn2 := tgbotapi.NewInlineKeyboardButtonData("üíº –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π", "tariff_classic")
	return tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(btn1),
		tgbotapi.NewInlineKeyboardRow(btn2),
	)
}
