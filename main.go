package main

import (
	"log"
	"os"
	"time"

	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"github.com/joho/godotenv"
)

type UserState struct {
	Stage      int
	LastAction time.Time
}

var userStates = make(map[int64]*UserState)

func main() {
	err := godotenv.Load()
	if err != nil {
		log.Println("No .env file found")
	}

	bot, err := tgbotapi.NewBotAPI(os.Getenv("TELEGRAM_TOKEN"))
	if err != nil {
		log.Panic(err)
	}

	u := tgbotapi.NewUpdate(0)
	u.Timeout = 60

	updates := bot.GetUpdatesChan(u)

	go reminderScheduler(bot)

	for update := range updates {
		if update.Message == nil && update.CallbackQuery == nil {
			continue
		}

		chatID := update.FromChat().ID
		state, exists := userStates[chatID]
		if !exists {
			state = &UserState{Stage: 0, LastAction: time.Now()}
			userStates[chatID] = state
		}

		if update.Message != nil && update.Message.Text == "–•–æ—á—É —É—Ä–æ–∫" {
			state.Stage = 1
			state.LastAction = time.Now()
			sendStage1(bot, chatID)
			continue
		}

		if update.CallbackQuery != nil {
			data := update.CallbackQuery.Data
			switch data {
			case "checklist":
				state.Stage = 2
				state.LastAction = time.Now()
				sendStage2(bot, chatID)
			case "reels":
				state.Stage = 3
				state.LastAction = time.Now()
				sendStage3(bot, chatID)
			case "course":
				state.Stage = 4
				state.LastAction = time.Now()
				sendStage4(bot, chatID)
			}
		}
	}
}

func sendStage1(bot *tgbotapi.BotAPI, chatID int64) {
	video := tgbotapi.NewVideo(chatID, tgbotapi.FileID("BAACAgIAAxkBAAMPaDQXibPXuGm8U9wG_KjFDwrJ8JkAAlVqAAJOBKFJ0BS7KrQcUS82BA"))
	video.Caption = "–í–æ—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –≤–∏–¥–µ–æ—É—Ä–æ–∫ üéì"
	bot.Send(video)

	msg := tgbotapi.NewMessage(chatID, "–•–æ—á–µ—à—å —á–µ–∫-–ª–∏—Å—Ç –ø–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º –¥–ª—è Reels?")
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞, —Ö–æ—á—É", "checklist"),
		),
	)
	msg.ReplyMarkup = btn
	bot.Send(msg)
}

func sendStage2(bot *tgbotapi.BotAPI, chatID int64) {
	doc := tgbotapi.NewDocument(chatID, tgbotapi.FileID("BQACAgIAAxkBAAMUaDQYsojlC47_ygUxnhYkdZGrCEwAAoBqAAJOBKFJGvpBU-vHqYo2BA"))
	doc.Caption = "–í–æ—Ç —Ç–≤–æ–π —á–µ–∫-–ª–∏—Å—Ç ‚úÖ"
	bot.Send(doc)

	msg := tgbotapi.NewMessage(chatID, "–•–æ—á–µ—à—å –ø—Ä–∏–º–µ—Ä—ã –∫—Ä—É—Ç—ã—Ö Reels?")
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–î–∞, –ø–æ–∫–∞–∂–∏", "reels"),
		),
	)
	msg.ReplyMarkup = btn
	bot.Send(msg)
}

func sendStage3(bot *tgbotapi.BotAPI, chatID int64) {
	video := tgbotapi.NewVideo(chatID, tgbotapi.FileID("BAACAgIAAxkBAAMWaDVurVxdzzx3_2JS8c0DTXLsrWMAAhxvAAIYyaFJaxtuxnFLdGE2BA"))
	video.Caption = "–¢—ã –≤—Å—ë –µ—â—ë –¥—É–º–∞–µ—à—å, —á—Ç–æ –∫—Ä—É—Ç—ã–µ Reels ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ñ–∏ —Å –¥–æ—Ä–æ–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π?"
	bot.Send(video)

	msg := tgbotapi.NewMessage(chatID, "üîÆ –¢—ã –≤—Å—ë –µ—â—ë –¥—É–º–∞–µ—à—å, —á—Ç–æ –∫—Ä—É—Ç—ã–µ Reels ‚Äî —ç—Ç–æ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ—Ñ–∏ —Å –¥–æ—Ä–æ–≥–æ–π —Ç–µ—Ö–Ω–∏–∫–æ–π?\nüëâ –ê —á—Ç–æ –µ—Å–ª–∏ —è —Å–∫–∞–∂—É, —á—Ç–æ —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞–≤–∞—Ç—å WOW-–≤–∏–¥–µ–æ —Å –Ω—É–ª—è, –±—É–∫–≤–∞–ª—å–Ω–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏–ª–∏ —Ñ–æ—Ç–æ ‚Äî —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π? –î–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –ø–æ–ª–Ω—ã–π –Ω–æ–≤–∏—á–æ–∫.\n\nüé¨ –ü—Ä–µ–¥—Å—Ç–∞–≤—å:\n‚Äî —Ç—ã –∑–∞–≥—Ä—É–∂–∞–µ—à—å —Ñ–æ—Ç–æ ‚Äî –∏ —á–µ—Ä–µ–∑ –ø–∞—Ä—É –º–∏–Ω—É—Ç —É —Ç–µ–±—è –≥–æ—Ç–æ–≤–æ —Å—Ç–∏–ª—å–Ω–æ–µ –≤–∏–¥–µ–æ\n‚Äî –ø–∏—à–µ—à—å –ø–∞—Ä—É —Å—Ç—Ä–æ–∫ ‚Äî –∏ –Ω–µ–π—Ä–æ—Å–µ—Ç—å –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç —ç—Ç–æ –≤ –¥–∏–Ω–∞–º–∏—á–Ω—ã–π —Ä–æ–ª–∏–∫\n‚Äî –∑–∞–º–µ–Ω—è–µ—à—å —Ñ–æ–Ω, –æ–¥–µ–∂–¥—É, –¥–∞–∂–µ –ª–∏—Ü–æ –≤ –∫–∞–¥—Ä–µ ‚Äî –∏ –≤—Å—ë —ç—Ç–æ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–µ\n\nüî• –ù–∞ –∫—É—Ä—Å–µ ¬´Reels —Å –ø–æ–º–æ—â—å—é –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π, –¥–∞–∂–µ –µ—Å–ª–∏ —Ç—ã –Ω–æ–≤–∏—á–æ–∫¬ª —Ç—ã –æ—Å–≤–æ–∏—à—å –Ω–∞–≤—ã–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–æ–∫–∞—á–∞—é—Ç —Ç–µ–±—è –¥–æ —É—Ä–æ–≤–Ω—è –ø—Ä–æ–¥—é—Å–µ—Ä–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∫–æ–ª–µ–Ω–∏—è:\n\n‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ —Ç–µ–∫—Å—Ç—É –∏ —Ñ–æ—Ç–æ ‚Äî –±–µ–∑ —Å—ä—ë–º–∫–∏\n‚úÖ –†–∞–±–æ—Ç–∞—Ç—å —Å 3D-–æ–±—ä–µ–∫—Ç–∞–º–∏ –∏ –≤–Ω–µ–¥—Ä—è—Ç—å –∏—Ö –≤ Reels\n‚úÖ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å DeepFake-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –¥–ª—è —ç—Ñ—Ñ–µ–∫—Ç–Ω–æ–π –∑–∞–º–µ–Ω—ã –ª–∏—Ü\n‚úÖ –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, —Ä–µ–∫–≤–∏–∑–∏—Ç, –¥–µ–∫–æ—Ä–∞—Ü–∏–∏ –∏ –æ–¥–µ–∂–¥—É\n‚úÖ –î–µ–ª–∞—Ç—å Reels –¥–ª—è –±—Ä–µ–Ω–¥–æ–≤ –∏ –ø—Ä–æ–¥–∞–≤–∞—Ç—å —Å–≤–æ–∏ –Ω–∞–≤—ã–∫–∏\n‚úÖ –°—Ç–∏–ª–∏–∑–æ–≤–∞—Ç—å –≤–∏–¥–µ–æ –ø–æ–¥ –ª—é–±–æ–π –∂–∞–Ω—Ä –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ ‚Äî –æ—Ç –∫–∏–Ω–æ –¥–æ fashion\n‚úÖ –ò –≥–ª–∞–≤–Ω–æ–µ ‚Äî –æ—Å–≤–æ–∏—à—å –±–∞–∑—É, –Ω—É–∂–Ω—É—é –¥–ª—è —É–≤–µ—Ä–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—è–º–∏ –∏ –º–æ–±–∏–ª—å–Ω—ã–º–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è–º–∏\n\nüì≤ –ù–∏–∫–∞–∫–æ–π —Å–ª–æ–∂–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫–∏. –¢–æ–ª—å–∫–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, –≥–æ—Ç–æ–≤—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏ —Ä–∞–∑–±–æ—Ä —Ç–≤–æ–∏—Ö —Ä–æ–ª–∏–∫–æ–≤.\n\nüåü –≠—Ç–æ –æ–±—É—á–µ–Ω–∏–µ ‚Äî —Ç–≤–æ–π —à–∞–≥ –≤ –±—É–¥—É—â–µ–µ, –≥–¥–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–∞ —Ç–µ–±—è, –∞ —Ç—ã ‚Äî —Å–æ–∑–¥–∞—ë—à—å –≤–∏—Ä—É—Å–Ω—ã–π, –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –º–æ–Ω–µ—Ç–∏–∑–∏—Ä—É–µ–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç.")
	btn := tgbotapi.NewInlineKeyboardMarkup(
		tgbotapi.NewInlineKeyboardRow(
			tgbotapi.NewInlineKeyboardButtonData("–•–æ—á—É –∫—É—Ä—Å", "course"),
		),
	)
	msg.ReplyMarkup = btn
	bot.Send(msg)
}

func sendStage4(bot *tgbotapi.BotAPI, chatID int64) {
	msg := tgbotapi.NewMessage(chatID, "–•–æ—á–µ—à—å –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ? –ù–∞–ø–∏—à–∏ –≤ —á–∞—Ç ¬´–•–û–ß–£ –ù–ê –ö–£–†–°¬ª –∏ —è –≤—Å—ë —Ä–∞—Å—Å–∫–∞–∂—É üî•")
	bot.Send(msg)
}

// ---------------------------
// –ù–∞–ø–æ–º–∏–Ω–∞–ª–∫–∏ —á–µ—Ä–µ–∑ 1 –∏ 2 –¥–Ω—è
// ---------------------------

func reminderScheduler(bot *tgbotapi.BotAPI) {
	ticker := time.NewTicker(time.Hour * 1)
	defer ticker.Stop()

	for {
		<-ticker.C
		now := time.Now()

		for chatID, state := range userStates {
			if state.Stage < 4 {
				since := now.Sub(state.LastAction)

				if since > 24*time.Hour && since < 25*time.Hour {
					sendReminder(bot, chatID, 1)
				} else if since > 48*time.Hour && since < 49*time.Hour {
					sendReminder(bot, chatID, 2)
				}
			}
		}
	}
}

func sendReminder(bot *tgbotapi.BotAPI, chatID int64, day int) {
	var text string
	if day == 1 {
		text = "–¢—ã –µ—â—ë –¥—É–º–∞–µ—à—å? –£—Ä–æ–∫ –∂–¥—ë—Ç —Ç–µ–±—è üëâ"
	} else if day == 2 {
		text = "–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã ‚Äî –ø–∏—à–∏, —è –ø–æ–º–æ–≥—É üí¨"
	}

	msg := tgbotapi.NewMessage(chatID, text)
	bot.Send(msg)
}
